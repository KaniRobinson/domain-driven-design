<?php

namespace DummyNamespace\Infrastructure\Authentication\Proxies;

use Carbon\Carbon;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use DummyNamespace\Domain\User\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\ValidationException;
use DummyNamespace\Domain\User\Notifications\User\PasswordReset;
use DummyNamespace\Domain\User\Notifications\User\ForgotPassword;

class ForgotPasswordProxy
{
    /**
     * Attempt Forgot Password
     *
     * @param Request $request
     * @return void
     */
    public function attemptForgot(Request $request)
    {
        $user = User::where('email', $request->input('email'))->first();

        if (!is_null($user)) {
            $token = Str::random(60);

            DB::table('password_resets')
                ->insert([
                    'email' => $request->input('email'),
                    'token' => $token,
                    'created_at' => Carbon::now()
                ]);

            $user->notify(new ForgotPassword($user, $token));
        }

        return response()->json([
            'success' => true
        ]);
    }

    /**
     * Attempt Reset Password
     *
     * @param Request $request
     * @param string $token
     * @return void
     */
    public function attemptReset(Request $request, $token)
    {
        $reset = DB::table('password_resets')
            ->where([
                'token' => $token
            ])->first();

        if(!is_null($reset)) {
            $user = User::where('email', $reset->email)->first();
            $user->password = Hash::make($request->input('password'));
            $user->save();

            $user->notify(new PasswordReset($user));

            return response()->json([
                'success' => true
            ]);
        }
        
        throw ValidationException::withMessages([
            'token' => [
                __('auth.reset.invalid_token')
            ],
        ]);
    }
}